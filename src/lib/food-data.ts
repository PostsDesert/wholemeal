import type { FoodItem, FoodGroupLabel } from '$lib/types';

export const FOOD_ITEMS = {
	protein: [
		{ text: 'Salmon', emoji: 'üç£' },
		{ text: 'chicken breast', emoji: 'üêî' },
		{ text: 'lean beef', emoji: 'ü•©' },
		{ text: 'turkey', emoji: 'ü¶É' },
		{ text: 'tuna', emoji: 'üêü' },
		{ text: 'tofu', emoji: 'ü•¢' },
		{ text: 'eggs', emoji: 'ü•ö' }
	],
	carb: [
		{ text: 'quinoa', emoji: 'üåæ' },
		{ text: 'Black beans', emoji: 'ü´ò' },
		{ text: 'chickpeas', emoji: 'üê§' },
		{ text: 'lentils', emoji: 'ü´ò' },
		{ text: 'potato', emoji: 'ü•î' },
		{ text: 'rice', emoji: 'üçö' },
		{ text: 'sweet potato', emoji: 'üç†' },
		{ text: 'pasta', emoji: 'üçù' },
		{ text: 'couscous', emoji: 'üåæ' },
		{ text: 'noodles', emoji: 'üçú' }
	],
	veggie: [
		{ text: 'broccoli', emoji: 'ü•¶' },
		{ text: 'veg medley', emoji: 'ü•¨' },
		{ text: 'squash', emoji: 'üéÉ' },
		{ text: 'peppers', emoji: 'ü´ë' },
		{ text: 'brussels sprouts', emoji: 'üå±' },
		{ text: 'arugula salad', emoji: 'ü•ó' },
		{ text: 'green beans', emoji: 'ü´õ' },
		{ text: 'peas', emoji: 'ü´õ' },
		{ text: 'spinach', emoji: 'üçÉ' },
		{ text: 'kale', emoji: 'ü•¨' },
		{ text: 'asparagus', emoji: 'üå±' },
		{ text: 'carrots', emoji: 'ü•ï' },
		{ text: 'tomato', emoji: 'üçÖ' },
		{ text: 'mushrooms', emoji: 'üçÑ' },
		{ text: 'cauliflower', emoji: 'ü•¶' },
		{ text: 'beets', emoji: 'üç†' },
		{ text: 'radish', emoji: 'ü´ë' },
		{ text: 'corn', emoji: 'üåΩ' },
		{ text: 'eggplant', emoji: 'üçÜ' },
		{ text: 'leeks', emoji: 'üßÖ' },
		{ text: 'pumpkin', emoji: 'üéÉ' },
		{ text: 'artichokes', emoji: 'üå±' },
		{ text: 'okra', emoji: 'ü´ë' },
		{ text: 'edamame', emoji: 'üå±' }
	],
};

// Helper function to normalize keys (lowercase + underscores)
const normalizeKey = (str: string): string => str.toLowerCase().replace(/\s+/g, "_");

// Define the lookup table type structure
type FoodLookup = {
  [key in FoodGroupLabel]: {
    [key: string]: FoodItem;
  };
};

// Create a lookup table from the array
export const FOOD_LOOKUP = Object.keys(FOOD_ITEMS).reduce<FoodLookup>((lookup, category) => {
  const foodCategory = category as FoodGroupLabel;
  lookup[foodCategory] = FOOD_ITEMS[foodCategory].reduce<Record<string, FoodItem>>((acc, item) => {
    acc[normalizeKey(item.text)] = item;
    return acc;
  }, {});
  return lookup;
}, {} as FoodLookup);

// üîç Lookup function (normalizes key and retrieves item)
export function getFoodItem(category: FoodGroupLabel, key: string): FoodItem | null {
  const normalizedKey = normalizeKey(key);
  return FOOD_LOOKUP[category]?.[normalizedKey] || null; // Return null if not found
}
